/*
 * Copyright 2010 Keith Stevens
 *
 * This file is part of the S-Space package and is covered under the terms and
 * conditions therein.
 *
 * The S-Space package is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation and distributed hereunder to you.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND NO REPRESENTATIONS OR WARRANTIES,
 * EXPRESS OR IMPLIED ARE MADE.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, WE MAKE
 * NO REPRESENTATIONS OR WARRANTIES OF MERCHANT- ABILITY OR FITNESS FOR ANY
 * PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE OR DOCUMENTATION
 * WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER
 * RIGHTS.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package edu.ucla.sspace.dependency;

import edu.ucla.sspace.text.IteratorFactory;
import edu.ucla.sspace.text.Stemmer;
import edu.ucla.sspace.text.TokenFilter;

import edu.ucla.sspace.util.Duple;
import edu.ucla.sspace.util.MultiMap;
import edu.ucla.sspace.util.HashMultiMap;

import java.io.BufferedReader;
import java.io.IOError;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
import java.util.TreeMap;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;


/**
 * A class for extracting dependency parsed sentences from <a
 * href="http://wacky.sslmit.unibo.it/doku.php?id=corpora">WaCKy</a> corpora.
 * These corpora use a modified <a
 * href="http://nextens.uvt.nl/depparse-wiki/DataFormat">CoNLL format</a>, which
 * are generated by the <a href="http://maltparser.org/index.html">Malt
 * Parser</a>.  The ordering of the CoNLL format can be specified with an xml
 * file following the format specified <a
 * href="http://maltparser.org/userguide.html#inout">here</a>.
 *
 * </p>
 *
 * Parsed sentences are returned as an array of {@link DependencyTreeNode}
 * innstances.  The nodes contain relations between each word in the sentence.
 * The nodes in the returned array are ordered by the ordering of word
 * occurrences.
 *
 * </p>
 *
 * This class optionally supports filtering sentences to remove words.  The
 * nodes for those removed words will still remain in the parse tree.
 * Similarly, the relations connecting the removed words will also existing.
 * However, the {@link DependencyTreeNode#word()} method will return {@link
 * IteratorFactory#EMPTY_TOKEN} to indicate that the node's text was filtered
 * out.  Note that the node will still have the original part of speech.
 *
 * @author David Jurgens
 */
public class WaCKyDependencyExtractor extends CoNLLDependencyExtractor {

    /**
     * Creates a new {@link WaCKyDependencyExtractor} that assumes the default
     * ordering for {@code Malt} dependency parses.
     */
    public WaCKyDependencyExtractor() {
        this(null,null);
    }

    /**
     * Creates a new {@link WaCKyDependencyExtractor} that assumes the default
     * ordering for {@code Malt} dependency parses and uses the given {@link
     * TokenFilter} and {@link Stemmer}.
     */
    public WaCKyDependencyExtractor(TokenFilter filter, Stemmer stemmer) {
        super(filter, stemmer, 3, 0, 1, 2, 4, 5);
    }
}
